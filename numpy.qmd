# Numpy

Gradivi za to poglavje sta:

-   <https://numpy.org/doc/stable/user/absolute_beginners.html>
-   <https://numpy.org/doc/stable/user/quickstart.html>

Vizualna reprecentacija operacij z Numpy seznami: <http://jalammar.github.io/visual-numpy/>

Še več vizualnih reprezentacij (ta stran vsebuje veliko več kot bomo mi obravnavali): <https://betterprogramming.pub/numpy-illustrated-the-visual-guide-to-numpy-3b1d4976de1d>

## Ustvarjanje tabel

Navaden seznam pretvorimo v Numpy seznam s funkcijo `np.array(seznam)`.

```{python, eval=FALSE}
import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
print(a)
print(a.shape)
print(a.ndim)
print(a.size)
```

```         
## [[1 2 3 4]
##  [5 6 7 8]]
## (2, 4)
## 2
## 8
```

Sezname lahko združimo z `np.concatenate(sez1, sez2)`, ki vrne staknjen seznam. To je počasna operacija, zato raje je ne uporabljamo. Če je le mogoče vnaprej ustvarimo nov seznam znane dolžine z eno od spodnjih metod:

-   `np.zeros(oblika)` vrne tabelo ničel; `oblika` je nabor celih števil, ki predstavlja obliko tabele
-   `np.ones(oblika)` vrne tabelo enic
-   `np.linspace(zacetek, konec, num)` vrne seznam `num` števil z intervala od `zacetek` do `konec`, kjer so elementi ekvidistančni
-   `np.arange(zacetek, konec, korak)` vrne seznam od vrednosti parametra `zacetek` (neobvezen, privzeto je 0) do `konec` s koraki `korak` (neobvezen, privzeto je 1)
-   `np.fromfunction(ime_funkcije, oblika)` ustvari tabelo z obliko `oblika`, kjer vsak element v tabeli izračuna s klicem funkcije `ime_funkcije`; funkcija mora sprejeti toliko argumentov, kolikor je dimenzij
-   `seznam.reshape(oblika)` spremeni obliko seznama

## Rezine

Do elementov tabel dostopamo s podobno sintakso kot pri običajnih seznamih (`zacetek:konec:korak`), le da to naredimo za vsako dimenzijo posebej ločeno z vejicami.

```{python}
import numpy as np
tabela = np.arange(0, 49).reshape(7, 7)
print(tabela)
razrezano = tabela[0:4,2:7:2]
print(razrezano)
```

Če želimo vse elemente v neki dimenziji napišemo `:`. Tako lahko dobimo posamezne stolpce.

```{python}
print(tabela[:,3])
```

Ko imamo enkrat izbrane želene vrstice in stolpce, lahko te vrednosti preberemo iz tabele in shranimo v spremenljivko (kot je to zgoraj pri `razrezano`) ali pa na ta izbrana mesta v tabeli shranimo neke vrednosti. Shranjujemo lahko tudi cele tabele:

```{python}
tabela[0:4,2:7:2] = np.arange(100, 112).reshape(4,3)
print(tabela)
```

## Uporabne funkcije

Glej predvsem uradno dokumentacijo: <https://numpy.org/doc/stable/reference/routines.sort.html>\
Vsaka funkcija ima opis parametrov in zelo nazorne primere uporabe.

Pri mnogih funkcijah lahko podamo neobvezni parameter `axis=x`, kjer je `x` številka osi, po kateri želimo operacijo izvesti (0, 1, 2, ...).

Pozor: True se obnaša kot 1 in False se obnaša kot 0 ter obratno.

-   `np.any(tabela)` vrne True, če je vsaj en element True
-   `np.all(tabela)` vrne True, če so vsi elementi True
-   `np.nonzero(tabela)` vrne indekse neničelnih elementov v vsaki dimenziji posebej (koordinate teh elementov)
-   `np.flatten(tabela)` vrne "flat" obliko tabele (enodimenzionalni seznam zaporednih elementov)
-   `np.flatnonzero(tabela)` vrne indekse neničelnih elementov v "flat" obliki tabele (zaporedni indeks)
-   `np.where(pogoj, x, y)` vrne elemente iz `x`, kjer je pogoj izpolnjen, sicer vrne ustrezni element iz `y`; pogoj se ovrednoti za vsak element posebej; glej primere v dokumentaciji!
-   `tabela.T` vrne transponiramo tabelo (to pomeni, da so elementi zrcaljeni preko diagonale); deluje tudi za nekvadratne tabele

```{python}
a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.T)
```

## Matematika

Dokumentacija: <https://numpy.org/doc/stable/reference/routines.math.html>

-   `np.sum(tabela)`
-   `np.cumsum(tabela)`
-   `np.prod(tabela)`
-   `np.log(tabela)`
-   `np.exp(tabela)`
-   `np.sin(tabela)`
-   itd.
